apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vgo-microservices-ingress
  namespace: vgo-microservices
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "30"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  ingressClassName: nginx
  rules:
  - host: vgo-iam.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: vgo-iam-http
            port:
              number: 8080
  - host: vgo-notify.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: vgo-notify-http
            port:
              number: 8082
  - host: api.vgo.local
    http:
      paths:
      - path: /iam(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: vgo-iam-http
            port:
              number: 8080
      - path: /notify(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: vgo-notify-http
            port:
              number: 8082
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vgo-monitoring-ingress
  namespace: vgo-monitoring
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: monitoring-auth
    nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - VGO Monitoring'
spec:
  ingressClassName: nginx
  rules:
  - host: prometheus.vgo.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: prometheus
            port:
              number: 9090
  - host: grafana.vgo.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 3000
  - host: jaeger.vgo.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: jaeger
            port:
              number: 16686
  - host: monitoring.vgo.local
    http:
      paths:
      - path: /prometheus(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: prometheus
            port:
              number: 9090
      - path: /grafana(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 3000
      - path: /jaeger(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: jaeger
            port:
              number: 16686
---
# Basic Auth Secret for Monitoring
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-auth
  namespace: vgo-monitoring
type: Opaque
data:
  # admin:admin123 (base64 encoded)
  auth: YWRtaW46JGFwcjEkSDY1dnVhNzIkLnNzaGtpbkNkZDhYeGJuNjNpSjBJMQo=
---
# Network Policy for microservices
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: vgo-microservices-netpol
  namespace: vgo-microservices
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: vgo-monitoring
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector: {}
  - ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 8082
    - protocol: TCP
      port: 9090
    - protocol: TCP
      port: 9091
    - protocol: TCP
      port: 9092
    - protocol: TCP
      port: 9093
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to:
    - namespaceSelector:
        matchLabels:
          name: vgo-monitoring
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443
---
# Network Policy for monitoring
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: vgo-monitoring-netpol
  namespace: vgo-monitoring
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector: {}
  - ports:
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 9090
    - protocol: TCP
      port: 16686
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: vgo-microservices
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443